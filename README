MARIA FERNANDA ARROYO (201740443)
JUAN CAMILO ROSERO (201746848)
JOSE DAVID ERAZO (201742505)


Proyecto sistemas operativos

Para la realización del proyecto se tomaron en cuenta algunos repositorios a manera de guia y algunos videos que se anexaran acontinuación.
https://www.youtube.com/watch?v=21SVYiKhcwM
https://github.com/tetsuyaAnkur/Date-in-xv6/blob/master/date.c

6.1.1. Imprimir las llamadas al sistema que se llevan a cabo


Mediante la implementación del comando csc, se imprimen las llamadas a algunas funciones del sistema y a su vez muestran las veces
en que estas fueron llamadas, este algoritmo se complementa con el 6.1.4

6.1.2. Escriba el comando uptime

Mediante la implementación del comando uptime, en el archivo uptime.c, se pudo desarrollar la implementación del tiempo de ejecución del sistema


  GNU nano 2.5.3          File: uptime.c                          
#include "types.h"
#include "user.h"


#include "types.h"
#include "user.h"

int
main (int argc, char *argv[])
{
        int utime;
        utime = (60*uptime()/atoi(argv[1]));
        printf(1, "up %d ticks\n", utime);
        exit();
}



6.1.3. Escriba el comando date

Tomando como base el algoritmo implementado por el docente, se desarrollo el codigo base para imprimir la hora en el sistema



#include "types.h"
#include "user.h"
#include "date.h"


int
main(int argc, char *argv[])
{
  struct rtcdate r;

  if (date(&r))
  {
        printf(2, "date failed\n");
        exit();
  }
   else
{
        printf(1,"La hora actual es %d:%d:%d\n",r.hour,r.minute,r$
}
exit();
}





6.1.4. Llamada al sistema que permita mostrar el número de invocaciones que una llamada al sistema ha tenido

tomando en cuenta el esqueleto base brindado por el docente, se decide imprimir el comando count que genera el numero de veces que se realiza
una llamada al sistema

#include "types.h"
#include "stat.h"
#include "user.h"

int
main(int argc, char *argv[])
{

 int nsyscall = -1;
 if (argc == 2) {
  nsyscall = atoi(argv[1]);
 }

 if (nsyscall == -1) {
  // mostrar todas las llamadas al sistema
  // con su correspondiente numero de invocaciones
    count(0);
 }
 else
 {
  // mostrar la llamada al sistema dada en nsyscall
  // con su correspondiente numero de invocaciones
   count(nsyscall);
}
exit();
}



















